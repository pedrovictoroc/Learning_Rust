--------------------------------------
                RUST
--------------------------------------


|-> Criação de funções
    -> Para criar funções usamos a sintaxe fn nome_função(){}

|-> Mostrando na tela
    -> Para fazermos um print chamamos a Macro println!()

    -> Para criarmos uma função de mesmo nome com função print
       precisamos apenas remover o !

|-> Cargo
    -> É um criador de sistemas e gerenciador de pacotes do Rust
       similar a criar um arquivo com create-react-app
       a pasta criada contem uma pasta src, um .gitignore e um Cargo.toml
    
    -> Criamos usando "cargo new nome_do_arquivo"

    -> Responsável por fazer a build do código, baixar as bibliotecas necessárias
       e gerenciar as dependências
    
    -> Cargo.toml
        * Significado
            - TOML = Tom's Obvious, Minimal Language
        
        * Contém um Package, onde ficam as informações básicas

        * Dependencies, abaixo seguirá a lista de dependências
          do código, os packages de código são referenciados como CRATES

    -> Podemos fazer build e run do projeto usando o Cargo

        * cargo build
            - Esse comando cria um arquivo Cargo.lock responsável
              por manter salvo a versão de todas as dependencias utilizadas
            
            - Cria uma pasta target, ao executarmos ./target/debug/nome_projeto.exe
              executamos o programa
        
        * cargo run
            - Ao invés de utilizar o comando de execução podemos também usar este
            
            - Cargo nota as alterações de código e automaticamente recompila
        
        * cargo check
            - Compila o código sem gerar executável

            - Suas vantagens consistem em sua velocidade em relação ao cargo build
              e no fato de que geralmente queremos apenas testar a ausência de erros de compilação
        
        * cargo build --release
            -Gera um código otimizado em Release, ao invés de Debug em Target

|-> Autorizando entrada de dados
    -> Para isso adicionamos ao topo do código "use std::io;"
       da biblioteca std

    -> ao usarmos io::stdin().read_line(&mut variable).expect("fail message")
       estamos chamando a função read_line que se atribui da função de colocar a submissão
       do usuário em &mut variable
        * O uso de & identifica uma referência
            - &variable faz referência a uma variável não mutável
        
        * .expect() é chamado se o Result da função for "err", se for "ok", essa parte será ignorada
          é importante notar que isso lança a mensagem de erro customizada

|-> Armazenamento de variáves
    EX: let mut guess = String:new();

    -> A funçãod o let é criar a variável e, caso necessário, linkar a algum valor

    -> ATENÇÃO, FUNÇÃO DO MUT
        * No RUST variáveis são imutáveis por default, entretando
          ao adicionarmos mut logo após let, definimos que ela é mutável
    
    -> String::new()
        * Essa sintaxe nos retorna uma String vazia

        * ::new() nos indica que é uma função associada a String

|-> Tipos numéricos
    -> Número de 32 bits: i32

    -> Número de 32 bits sem sinal: u32

    -> Número de 64 bits: i64

    -> Número de 64 bits sem sinal: u64

|-> Variáveis e mutabilidade
    -> Existem dois tipos de definição de variável: LET E CONST

        * Let
            - Por padrão é imutável, tal condição pode ser alterada adicionando MUT após o let
                > Podemos utilizar de Shadowing e simplesmente sobrescrever a variável
                    #EXEMPLO: (let teste: u32 = 4000; let teste:u32 = 50;)
                > Utilizando mut evitamos errar ao esquercermos de usar let antes da variável a ser sobrescrita
                    #OBSERVAÇÃO: Em contra partida, não podemos alterar o tipo desta variável apenas por ser mutável
        
        * Const
            - Seu comportamento é sempre de imutabilidade, não pode ser alterado
            - As boas práticas do Rust dizem para utilizar nomes em Caps Lock com underscore
                > Exemplo: const MAX_VALUE: u32 = 10000;
                    #OBSERVAÇÃO: podemos também escrever: 10_000, o Rust entenderá como 10000


|-> Tipos de dados
    -> Scalar
        * Integer
            - Como definir:
                
                LENGHT      Signed      Unsigned
                
                8-bit        i8            u8
                16-bit       i16           u16
                32-bit       i32           u32
                64-bit       i64           u64
                128-bit      i128          u128
        
        * Float
            - Temos dois tipos, f32 e f64, entretando, por padrão, o f64 será usado
        
        * Boolean
            - Podemos definir de duas formas, implicitamente e explcitamente
                > Implicitamente
                    #Exemplo: let t = true;
                
                > Explicitamente
                    #Exemplo: let f: bool = false;
        
        * Character
            - Um char em Rust tolera não só letras, mas, também, caracteres especiais, emojis e representações de espaço nulo
    
    -> Compound
        * Tuple
            - Uma vez declarada, não pode ser alterada

            #Exemplo: let tup: (i32,f64,u8) = (500, 6.4,1);
            
            - Podemos fazer acessos diretos a tupla, tup.0, por exemplo, retornaria 500
        
        * Array
            - Todos os elementos de um array devem ter o mesmo tipo
            - Arrays em Rust tem tamanho fixo

            - Podemos definir de forma implicita ou explicita
                > Implicitamente
                    #Exemplo: let a  = [1,2,3,4,5];
                    #Exemplo: let a = [3;5] a resposta será um array inicializado com 5 posições contendo 3
                
                > Explicitamente
                    #Exemplo: let a: [i32;5] = [1,2,3,4,5];

|-> Ownership
    -> Em algumas linguagens, existem garbage collectors que buscam por pedaços de memória que não serão mais
       utilizados, para que sejam deletadas, em outras, o programador deve alocar e liberar a memória de forma
       consciente. Rust utiliza o conceito de Ownership, um sistema com um conjunto de regras que o compilador
       verificará durante o tempo de compilação.
    
    * OBSERVAÇÃO:
        === Entendendo a Stack e Heap de memória ===

        -> Stack
            * Como sabemos, obedece o conceito de last in, first out, na Stack armazenamos dados de tamanho
              fixo, diferentemente da Heap, não chamamos o processo de inserção de dados na Stack de alocação,
              pois sabemos o tamanho do ponteiro e, quando precisamos dos dados, apenas seguimos o ponteiro.
              Inserção de dados na Stack é consideravelmente mais rápida, pois o ponteiro é sempre colocado no
              topo e, diferentemente da Heap, não é necessário buscar espaço livre.

            - Quando uma função é chamada, os dados passados para ela, bem como as variáveis criadas no escopo
              são armazenadas no topo da Stack, quando a função é finalizada, esses dados são removidos
        
        -> Heap
            * Utilizada para dados sem tamanho fixo, menos organizada que a Stack. Quando requerimos a adição
              de dados na Heap o Sistema irá buscar um espaço na Heap grande o suficiente e retornará um
              ponteiro, que é o endereço daquela espaço de memória, a este processo damos o nome de alocação
              em Heap, ou, simplesmente, alocação.

            - Manter em mente quais e quando os dados da Heap são utilizados é fundamental para evitar dados
              duplicados, o que evita, por consequência, a demora na busca do Sistema por espaço de armazenamento
        
    -> Regras de Ownership
        * Cada valor deve ter apenas uma variável, chamada de Owner
        * Só pode existir um Owner por vez
        * Quando o Owner sair de escopo, o valor será "dropado"(removido, se preferir)
    
    -> Exemplo de uso da Heap
        * Sabemos que o tipo "string literal" é imutável, naturalmente um problema quando precisamos lidar com
          textos, entretanto, temos o Data Type String, que, por meio de métodos, altera a string,
          Ex:
                let s = String::from("Hello");
                s.push_str(", world!);
                println!("{}",s);
          
          Como bem observamos, a string foi alterada, se notarmos bem isso implica que o tamanho dela foi
          modificado, portanto, não pode permanecer na Stack, deve estar na Heap.

          Historicamente temos algumas soluções para os problemas de manuseio de memória. Temos o Garbage Collector(GC),
          que busca constantemente por memória inutilizada para reciclar, o que garante ao programador uma certa
          despreocupação quanto ao assunto, entretanto, tem impacto no desempenho do programa. Temos o caso de linguagens
          em que o programador tem como obrigação armazenar e liberar a memória utilizada, o que recupera a possível perda
          de desempenho do GC, mas gera problemas quanto a disponibilidade da memória no decorrer do programa.
          Rust utiliza uma outra abordagem, a memória utilizada é devolvida assim que o seu Owner(variável), sai de escopo,

        * Vamos entender um pouco melhor como funciona a atribuição de variáveis em Rust
            EX: Para dados de tamanho fixo

                let a = 5;
                let b = a;

                Sabemos bem o que está acontecendo, o tipo de dado de 5 tem tamanho fixo e pode ser armazenado na Stack,
                o que está acontecendo é a atribuição do valor 5 em "a", depois a cópia deste valor é feita e atribuida
                a "b"
            
            EX: Para dados de tamanho não-fixo

                let s1 = String::from("teste");
                let s2 = s1;

                Como vimos anteriormente, este tipo de dado tem tamanho modificável, logo, deve permanecer na heap, neste
                caso, diferentemente do que acontece no exemplo anterior, quando atribuimos o valor de s1 para s2, não estamos
                duplicando o conteúdo de s1 e atribuindo a s2, mas, na verdade, copiando o LENGHT, CAPACITY e o PONTEIRO deste
                dado, logo, evitamos o uso desnecessário de memória na Heap
            
            - Bom, analisando o quadro do exemplo dois e lembrando da forma como o Rust trabalha com o descarte de memória
              chegamos a uma dúvida "Quando o escopo for encerrado, s1 será liberado e s2 também, mas se ambos se referem ao
              mesmo espaço de memória, isso não causaria um 'Double free'?", bem, na verdade, o que ocorre de fato é que,
              quando efetuamos "s2=s1" nós estamos fazendo o que é chamado de "Move", estamos movendo, e não clonando, o conteúdo
              de s1 para s2, logo, se tentarmos acessar s1, receberemos um erro, tal Owner não pode mais ser utilizado, o que
              corrige o possível erro comentado.
            
            - Uma solução para o possível problema de realmente necessitarmos das duas variáveis com o conteúdo que foi movido é
              o uso do método clone:
              
              Ex:
                    let s1 = String::from("hello");
                    let s2 = s1.clone();
                
                De fato, o que estamos fazendo é duplicar o que está em s1 e colocar s2 como seu Owner.
    
    -> Referência e Empréstimo (reference and borrowing)
        * Em algumas soluções para o problema de perda de Ownership, o retorno de uma função é uma tupla,
          com o valor calculado pela função e as variáveis passadas, para que o Ownership seja restabelecido
          ao contexto anterior à chamada, aqui apresentamos uma forma melhor. Utilizaremos a passagem por
          referência.

          EX:
                let s1 = String::from("Hello");
                let len = get_len(&s1);

                fn get_len(s: &String) -> usize{
                    s.len()
                }
          
          Notemos aqui que o que realmente é passado é a referência para s1, de forma que s apenas se refere
          a s1, dessa forma, s nunca foi Proprietário do que está em s1, apenas recebeu o conteúdo como Empréstimo
          e efetuou os cálculos necessários, de forma que não é necessário retornar s, apenas o valor calculado.
        
        * Algumas regras sobre o uso de referências mutáveis:
            - Não podemos ter 2 variáveis recebendo a referência de forma mutável ao mesmo tempo
            - Varias variáveis imutáveis recebendo referência é permitido, entretando, se adicionarmos
              uma variável com o conteúdo de forma mutável, ISSO RESULTARÁ EM UM ERRO CASO AS VARIÁVEIS 
              IMUTÁVEIS SEJAM UTILIZADAS POSTERIORMENTE

              EX: caso em que não há erro:

                    let s1 = String::from("Hello");
                    let r1 = &s1;
                    let r2 = &s1;
                    println!("{}, {}", r1,r2);
                    let r3 = &mut s1;
                    println!("{}", r3);
            
            - Frequentemente, quando lidamos com referências, cometemos o erro chamado "dangling pointers",
              quando, por exemplo, criamos uma String no escopo de uma função e retornamos sua referência.
              Bom, a este ponto sabemos que, no fim do seu escopo, esta variável é apagada e a memória reciclada,
              portanto, a referência não está sendo condizente com o que se quer fazer, o que faz o compilador
              retornar um erro. Uma correção para isso seria retornar a String em sí, de fato, a variável será
              descartada no fim do escopo, entretando, sua Ownership será passada adiante, corrigindo o erro.